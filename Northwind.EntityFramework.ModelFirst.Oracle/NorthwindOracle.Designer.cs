//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool.
// Code is generated on: 14.05.2011 01:34:00
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Data;
using System.Linq;
using System.Data.Common;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Customer_CustomerDemographic", "Customers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Customers), "CustomerDemographics", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.CustomerDemographics))]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Territory", "Employees", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Employees), "Territories", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Territories))]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Category_Product", "Category", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Categories), "Products", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Products), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Supplier_Product", "Supplier", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Suppliers), "Products", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Products), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Order_OrderDetail", "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Orders), "OrderDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.OrderDetails), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Product_OrderDetail", "Product", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Products), "OrderDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.OrderDetails), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Customer_Order", "Customer", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Customers), "Orders", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Orders), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Order", "Employee", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Employees), "Orders", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Orders), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Shipper_Order", "Shipper", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Shippers), "Orders", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Orders), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Region_Territory", "Region", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Regions), "Territories", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Territories), true)]
[assembly: EdmRelationshipAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Employee", "Superior", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Employees), "Subordinates", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Northwind.EntityFramework.ModelFirst.Oracle.Employees), true)]

#endregion

namespace Northwind.EntityFramework.ModelFirst.Oracle
{

    #region NorthwindOracleContext

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class NorthwindOracleContext : ObjectContext
    {
        #region Constructors

        /// <summary>
        /// Initialize a new NorthwindOracleContext object.
        /// </summary>
        public NorthwindOracleContext() : 
                base(@"name=NorthwindConnectionString", "NorthwindOracleContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initializes a new NorthwindOracleContext object using the connection string found in the 'NorthwindOracleContext' section of the application configuration file.
        /// </summary>
        public NorthwindOracleContext(string connectionString) : 
                base(connectionString, "NorthwindOracleContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        /// <summary>
        /// Initialize a new NorthwindOracleContext object.
        /// </summary>
        public NorthwindOracleContext(EntityConnection connection) : base(connection, "NorthwindOracleContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }

        #endregion

        #region Partial Methods

        partial void OnContextCreated();

        #endregion

        #region ObjectSet Properties

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Categories> Categories
        {
            get
            {
                if ((_Categories == null))
                {
                    _Categories = base.CreateObjectSet<Categories>("Categories");
                }
                return _Categories;
            }
        }
        private ObjectSet<Categories> _Categories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Customers> Customers
        {
            get
            {
                if ((_Customers == null))
                {
                    _Customers = base.CreateObjectSet<Customers>("Customers");
                }
                return _Customers;
            }
        }
        private ObjectSet<Customers> _Customers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CustomerDemographics> CustomerDemographics
        {
            get
            {
                if ((_CustomerDemographics == null))
                {
                    _CustomerDemographics = base.CreateObjectSet<CustomerDemographics>("CustomerDemographics");
                }
                return _CustomerDemographics;
            }
        }
        private ObjectSet<CustomerDemographics> _CustomerDemographics;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Territories> Territories
        {
            get
            {
                if ((_Territories == null))
                {
                    _Territories = base.CreateObjectSet<Territories>("Territories");
                }
                return _Territories;
            }
        }
        private ObjectSet<Territories> _Territories;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Employees> Employees
        {
            get
            {
                if ((_Employees == null))
                {
                    _Employees = base.CreateObjectSet<Employees>("Employees");
                }
                return _Employees;
            }
        }
        private ObjectSet<Employees> _Employees;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Suppliers> Suppliers
        {
            get
            {
                if ((_Suppliers == null))
                {
                    _Suppliers = base.CreateObjectSet<Suppliers>("Suppliers");
                }
                return _Suppliers;
            }
        }
        private ObjectSet<Suppliers> _Suppliers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Shippers> Shippers
        {
            get
            {
                if ((_Shippers == null))
                {
                    _Shippers = base.CreateObjectSet<Shippers>("Shippers");
                }
                return _Shippers;
            }
        }
        private ObjectSet<Shippers> _Shippers;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Regions> Regions
        {
            get
            {
                if ((_Regions == null))
                {
                    _Regions = base.CreateObjectSet<Regions>("Regions");
                }
                return _Regions;
            }
        }
        private ObjectSet<Regions> _Regions;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Products> Products
        {
            get
            {
                if ((_Products == null))
                {
                    _Products = base.CreateObjectSet<Products>("Products");
                }
                return _Products;
            }
        }
        private ObjectSet<Products> _Products;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OrderDetails> OrderDetails
        {
            get
            {
                if ((_OrderDetails == null))
                {
                    _OrderDetails = base.CreateObjectSet<OrderDetails>("OrderDetails");
                }
                return _OrderDetails;
            }
        }
        private ObjectSet<OrderDetails> _OrderDetails;

        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Orders> Orders
        {
            get
            {
                if ((_Orders == null))
                {
                    _Orders = base.CreateObjectSet<Orders>("Orders");
                }
                return _Orders;
            }
        }
        private ObjectSet<Orders> _Orders;

        #endregion
        #region AddTo Methods

        /// <summary>
        /// Deprecated Method for adding a new object to the Categories EntitySet.
        /// </summary>
        public void AddToCategories(Categories categories)
        {
            base.AddObject("Categories", categories);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Customers EntitySet.
        /// </summary>
        public void AddToCustomers(Customers customers)
        {
            base.AddObject("Customers", customers);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the CustomerDemographics EntitySet.
        /// </summary>
        public void AddToCustomerDemographics(CustomerDemographics customerDemographics)
        {
            base.AddObject("CustomerDemographics", customerDemographics);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Territories EntitySet.
        /// </summary>
        public void AddToTerritories(Territories territories)
        {
            base.AddObject("Territories", territories);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Employees EntitySet.
        /// </summary>
        public void AddToEmployees(Employees employees)
        {
            base.AddObject("Employees", employees);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Suppliers EntitySet.
        /// </summary>
        public void AddToSuppliers(Suppliers suppliers)
        {
            base.AddObject("Suppliers", suppliers);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Shippers EntitySet.
        /// </summary>
        public void AddToShippers(Shippers shippers)
        {
            base.AddObject("Shippers", shippers);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Regions EntitySet.
        /// </summary>
        public void AddToRegions(Regions regions)
        {
            base.AddObject("Regions", regions);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Products EntitySet.
        /// </summary>
        public void AddToProducts(Products products)
        {
            base.AddObject("Products", products);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the OrderDetails EntitySet.
        /// </summary>
        public void AddToOrderDetails(OrderDetails orderDetails)
        {
            base.AddObject("OrderDetails", orderDetails);
        }

        /// <summary>
        /// Deprecated Method for adding a new object to the Orders EntitySet.
        /// </summary>
        public void AddToOrders(Orders orders)
        {
            base.AddObject("Orders", orders);
        }

        #endregion
    }

    #endregion

    #region Entity Classes

    #region Categories

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Categories in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CategoryID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Categories")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Categories : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Categories object.
        /// </summary>
        /// <param name="categoryID">Initial value of CategoryID.</param>
        /// <param name="categoryName">Initial value of CategoryName.</param>
        public static Categories CreateCategories(int categoryID, string categoryName)
        {
            Categories categories = new Categories();
            categories.CategoryID = categoryID;
            categories.CategoryName = categoryName;
            return categories;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for CategoryID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int CategoryID
        {
            get
            {
                int value = _CategoryID;
                OnGetCategoryID(ref value);
                return value;
            }
            set
            {
                if (_CategoryID != value)
                {
                  OnCategoryIDChanging(ref value);
                  ReportPropertyChanging("CategoryID");
                  _CategoryID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CategoryID");
                  OnCategoryIDChanged();
              }
            }
        }
        private int _CategoryID;
        partial void OnGetCategoryID(ref int value);
        partial void OnCategoryIDChanging(ref int value);
        partial void OnCategoryIDChanged();
    
    /// <summary>
    /// There are no comments for CategoryName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string CategoryName
        {
            get
            {
                string value = _CategoryName;
                OnGetCategoryName(ref value);
                return value;
            }
            set
            {
                if (_CategoryName != value)
                {
                  OnCategoryNameChanging(ref value);
                  ReportPropertyChanging("CategoryName");
                  _CategoryName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CategoryName");
                  OnCategoryNameChanged();
              }
            }
        }
        private string _CategoryName;
        partial void OnGetCategoryName(ref string value);
        partial void OnCategoryNameChanging(ref string value);
        partial void OnCategoryNameChanged();
    
    /// <summary>
    /// There are no comments for Description in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Description
        {
            get
            {
                string value = _Description;
                OnGetDescription(ref value);
                return value;
            }
            set
            {
                if (_Description != value)
                {
                  OnDescriptionChanging(ref value);
                  ReportPropertyChanging("Description");
                  _Description = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Description");
                  OnDescriptionChanged();
              }
            }
        }
        private string _Description;
        partial void OnGetDescription(ref string value);
        partial void OnDescriptionChanging(ref string value);
        partial void OnDescriptionChanged();
    
    /// <summary>
    /// There are no comments for Picture in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public byte[] Picture
        {
            get
            {
                byte[] value = _Picture;
                OnGetPicture(ref value);
                return value;
            }
            set
            {
                if (_Picture != value)
                {
                  OnPictureChanging(ref value);
                  ReportPropertyChanging("Picture");
                  _Picture = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Picture");
                  OnPictureChanged();
              }
            }
        }
        private byte[] _Picture;
        partial void OnGetPicture(ref byte[] value);
        partial void OnPictureChanging(ref byte[] value);
        partial void OnPictureChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Category_Product", "Products")]


        public EntityCollection<Products> Products
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Products");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Products", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Customers

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Customers in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CustomerID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Customers")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Customers : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Customers object.
        /// </summary>
        /// <param name="customerID">Initial value of CustomerID.</param>
        /// <param name="companyName">Initial value of CompanyName.</param>
        public static Customers CreateCustomers(string customerID, string companyName)
        {
            Customers customers = new Customers();
            customers.CustomerID = customerID;
            customers.CompanyName = companyName;
            return customers;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for CustomerID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string CustomerID
        {
            get
            {
                string value = _CustomerID;
                OnGetCustomerID(ref value);
                return value;
            }
            set
            {
                if (_CustomerID != value)
                {
                  OnCustomerIDChanging(ref value);
                  ReportPropertyChanging("CustomerID");
                  _CustomerID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CustomerID");
                  OnCustomerIDChanged();
              }
            }
        }
        private string _CustomerID;
        partial void OnGetCustomerID(ref string value);
        partial void OnCustomerIDChanging(ref string value);
        partial void OnCustomerIDChanged();
    
    /// <summary>
    /// There are no comments for CompanyName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string CompanyName
        {
            get
            {
                string value = _CompanyName;
                OnGetCompanyName(ref value);
                return value;
            }
            set
            {
                if (_CompanyName != value)
                {
                  OnCompanyNameChanging(ref value);
                  ReportPropertyChanging("CompanyName");
                  _CompanyName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyName");
                  OnCompanyNameChanged();
              }
            }
        }
        private string _CompanyName;
        partial void OnGetCompanyName(ref string value);
        partial void OnCompanyNameChanging(ref string value);
        partial void OnCompanyNameChanged();
    
    /// <summary>
    /// There are no comments for ContactName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ContactName
        {
            get
            {
                string value = _ContactName;
                OnGetContactName(ref value);
                return value;
            }
            set
            {
                if (_ContactName != value)
                {
                  OnContactNameChanging(ref value);
                  ReportPropertyChanging("ContactName");
                  _ContactName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ContactName");
                  OnContactNameChanged();
              }
            }
        }
        private string _ContactName;
        partial void OnGetContactName(ref string value);
        partial void OnContactNameChanging(ref string value);
        partial void OnContactNameChanged();
    
    /// <summary>
    /// There are no comments for ContactTitle in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ContactTitle
        {
            get
            {
                string value = _ContactTitle;
                OnGetContactTitle(ref value);
                return value;
            }
            set
            {
                if (_ContactTitle != value)
                {
                  OnContactTitleChanging(ref value);
                  ReportPropertyChanging("ContactTitle");
                  _ContactTitle = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ContactTitle");
                  OnContactTitleChanged();
              }
            }
        }
        private string _ContactTitle;
        partial void OnGetContactTitle(ref string value);
        partial void OnContactTitleChanging(ref string value);
        partial void OnContactTitleChanged();
    
    /// <summary>
    /// There are no comments for Address in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
    /// <summary>
    /// There are no comments for City in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string City
        {
            get
            {
                string value = _City;
                OnGetCity(ref value);
                return value;
            }
            set
            {
                if (_City != value)
                {
                  OnCityChanging(ref value);
                  ReportPropertyChanging("City");
                  _City = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("City");
                  OnCityChanged();
              }
            }
        }
        private string _City;
        partial void OnGetCity(ref string value);
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged();
    
    /// <summary>
    /// There are no comments for Region in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Region
        {
            get
            {
                string value = _Region;
                OnGetRegion(ref value);
                return value;
            }
            set
            {
                if (_Region != value)
                {
                  OnRegionChanging(ref value);
                  ReportPropertyChanging("Region");
                  _Region = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Region");
                  OnRegionChanged();
              }
            }
        }
        private string _Region;
        partial void OnGetRegion(ref string value);
        partial void OnRegionChanging(ref string value);
        partial void OnRegionChanged();
    
    /// <summary>
    /// There are no comments for PostalCode in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string PostalCode
        {
            get
            {
                string value = _PostalCode;
                OnGetPostalCode(ref value);
                return value;
            }
            set
            {
                if (_PostalCode != value)
                {
                  OnPostalCodeChanging(ref value);
                  ReportPropertyChanging("PostalCode");
                  _PostalCode = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PostalCode");
                  OnPostalCodeChanged();
              }
            }
        }
        private string _PostalCode;
        partial void OnGetPostalCode(ref string value);
        partial void OnPostalCodeChanging(ref string value);
        partial void OnPostalCodeChanged();
    
    /// <summary>
    /// There are no comments for Country in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Country
        {
            get
            {
                string value = _Country;
                OnGetCountry(ref value);
                return value;
            }
            set
            {
                if (_Country != value)
                {
                  OnCountryChanging(ref value);
                  ReportPropertyChanging("Country");
                  _Country = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Country");
                  OnCountryChanged();
              }
            }
        }
        private string _Country;
        partial void OnGetCountry(ref string value);
        partial void OnCountryChanging(ref string value);
        partial void OnCountryChanged();
    
    /// <summary>
    /// There are no comments for Phone in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Phone
        {
            get
            {
                string value = _Phone;
                OnGetPhone(ref value);
                return value;
            }
            set
            {
                if (_Phone != value)
                {
                  OnPhoneChanging(ref value);
                  ReportPropertyChanging("Phone");
                  _Phone = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Phone");
                  OnPhoneChanged();
              }
            }
        }
        private string _Phone;
        partial void OnGetPhone(ref string value);
        partial void OnPhoneChanging(ref string value);
        partial void OnPhoneChanged();
    
    /// <summary>
    /// There are no comments for Fax in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Fax
        {
            get
            {
                string value = _Fax;
                OnGetFax(ref value);
                return value;
            }
            set
            {
                if (_Fax != value)
                {
                  OnFaxChanging(ref value);
                  ReportPropertyChanging("Fax");
                  _Fax = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Fax");
                  OnFaxChanged();
              }
            }
        }
        private string _Fax;
        partial void OnGetFax(ref string value);
        partial void OnFaxChanging(ref string value);
        partial void OnFaxChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for CustomerDemographics in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Customer_CustomerDemographic", "CustomerDemographics")]


        public EntityCollection<CustomerDemographics> CustomerDemographics
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<CustomerDemographics>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_CustomerDemographic", "CustomerDemographics");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<CustomerDemographics>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_CustomerDemographic", "CustomerDemographics", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Customer_Order", "Orders")]


        public EntityCollection<Orders> Orders
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Orders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Orders", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region CustomerDemographics

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.CustomerDemographics in the schema.
    /// </summary>
    /// <KeyProperties>
    /// CustomerTypeID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="CustomerDemographics")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CustomerDemographics : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new CustomerDemographics object.
        /// </summary>
        /// <param name="customerTypeID">Initial value of CustomerTypeID.</param>
        public static CustomerDemographics CreateCustomerDemographics(string customerTypeID)
        {
            CustomerDemographics customerDemographics = new CustomerDemographics();
            customerDemographics.CustomerTypeID = customerTypeID;
            return customerDemographics;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for CustomerTypeID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string CustomerTypeID
        {
            get
            {
                string value = _CustomerTypeID;
                OnGetCustomerTypeID(ref value);
                return value;
            }
            set
            {
                if (_CustomerTypeID != value)
                {
                  OnCustomerTypeIDChanging(ref value);
                  ReportPropertyChanging("CustomerTypeID");
                  _CustomerTypeID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CustomerTypeID");
                  OnCustomerTypeIDChanged();
              }
            }
        }
        private string _CustomerTypeID;
        partial void OnGetCustomerTypeID(ref string value);
        partial void OnCustomerTypeIDChanging(ref string value);
        partial void OnCustomerTypeIDChanged();
    
    /// <summary>
    /// There are no comments for CustomerDesc in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string CustomerDesc
        {
            get
            {
                string value = _CustomerDesc;
                OnGetCustomerDesc(ref value);
                return value;
            }
            set
            {
                if (_CustomerDesc != value)
                {
                  OnCustomerDescChanging(ref value);
                  ReportPropertyChanging("CustomerDesc");
                  _CustomerDesc = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("CustomerDesc");
                  OnCustomerDescChanged();
              }
            }
        }
        private string _CustomerDesc;
        partial void OnGetCustomerDesc(ref string value);
        partial void OnCustomerDescChanging(ref string value);
        partial void OnCustomerDescChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Customer_CustomerDemographic", "Customers")]


        public EntityCollection<Customers> Customers
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_CustomerDemographic", "Customers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_CustomerDemographic", "Customers", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Territories

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Territories in the schema.
    /// </summary>
    /// <KeyProperties>
    /// TerritoryID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Territories")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Territories : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Territories object.
        /// </summary>
        /// <param name="territoryID">Initial value of TerritoryID.</param>
        /// <param name="territoryDescription">Initial value of TerritoryDescription.</param>
        /// <param name="regionID">Initial value of RegionID.</param>
        public static Territories CreateTerritories(string territoryID, string territoryDescription, int regionID)
        {
            Territories territories = new Territories();
            territories.TerritoryID = territoryID;
            territories.TerritoryDescription = territoryDescription;
            territories.RegionID = regionID;
            return territories;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for TerritoryID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public string TerritoryID
        {
            get
            {
                string value = _TerritoryID;
                OnGetTerritoryID(ref value);
                return value;
            }
            set
            {
                if (_TerritoryID != value)
                {
                  OnTerritoryIDChanging(ref value);
                  ReportPropertyChanging("TerritoryID");
                  _TerritoryID = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TerritoryID");
                  OnTerritoryIDChanged();
              }
            }
        }
        private string _TerritoryID;
        partial void OnGetTerritoryID(ref string value);
        partial void OnTerritoryIDChanging(ref string value);
        partial void OnTerritoryIDChanged();
    
    /// <summary>
    /// There are no comments for TerritoryDescription in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string TerritoryDescription
        {
            get
            {
                string value = _TerritoryDescription;
                OnGetTerritoryDescription(ref value);
                return value;
            }
            set
            {
                if (_TerritoryDescription != value)
                {
                  OnTerritoryDescriptionChanging(ref value);
                  ReportPropertyChanging("TerritoryDescription");
                  _TerritoryDescription = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("TerritoryDescription");
                  OnTerritoryDescriptionChanged();
              }
            }
        }
        private string _TerritoryDescription;
        partial void OnGetTerritoryDescription(ref string value);
        partial void OnTerritoryDescriptionChanging(ref string value);
        partial void OnTerritoryDescriptionChanged();
    
    /// <summary>
    /// There are no comments for RegionID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int RegionID
        {
            get
            {
                int value = _RegionID;
                OnGetRegionID(ref value);
                return value;
            }
            set
            {
                if (_RegionID != value)
                {
                  OnRegionIDChanging(ref value);
                  ReportPropertyChanging("RegionID");
                  _RegionID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RegionID");
                  OnRegionIDChanged();
              }
            }
        }
        private int _RegionID;
        partial void OnGetRegionID(ref int value);
        partial void OnRegionIDChanging(ref int value);
        partial void OnRegionIDChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Territory", "Employees")]


        public EntityCollection<Employees> Employees
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Territory", "Employees");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Territory", "Employees", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Regions in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Region_Territory", "Region")]


        public Regions Region
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Regions>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Region").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Regions>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Region").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Regions in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Regions> RegionReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Regions>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Region");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Regions>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Region", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Regions>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Region").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #region Employees

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Employees in the schema.
    /// </summary>
    /// <KeyProperties>
    /// EmployeeID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Employees")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Employees : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Employees object.
        /// </summary>
        /// <param name="employeeID">Initial value of EmployeeID.</param>
        /// <param name="lastName">Initial value of LastName.</param>
        /// <param name="firstName">Initial value of FirstName.</param>
        public static Employees CreateEmployees(int employeeID, string lastName, string firstName)
        {
            Employees employees = new Employees();
            employees.EmployeeID = employeeID;
            employees.LastName = lastName;
            employees.FirstName = firstName;
            return employees;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for EmployeeID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int EmployeeID
        {
            get
            {
                int value = _EmployeeID;
                OnGetEmployeeID(ref value);
                return value;
            }
            set
            {
                if (_EmployeeID != value)
                {
                  OnEmployeeIDChanging(ref value);
                  ReportPropertyChanging("EmployeeID");
                  _EmployeeID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("EmployeeID");
                  OnEmployeeIDChanged();
              }
            }
        }
        private int _EmployeeID;
        partial void OnGetEmployeeID(ref int value);
        partial void OnEmployeeIDChanging(ref int value);
        partial void OnEmployeeIDChanged();
    
    /// <summary>
    /// There are no comments for LastName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string LastName
        {
            get
            {
                string value = _LastName;
                OnGetLastName(ref value);
                return value;
            }
            set
            {
                if (_LastName != value)
                {
                  OnLastNameChanging(ref value);
                  ReportPropertyChanging("LastName");
                  _LastName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("LastName");
                  OnLastNameChanged();
              }
            }
        }
        private string _LastName;
        partial void OnGetLastName(ref string value);
        partial void OnLastNameChanging(ref string value);
        partial void OnLastNameChanged();
    
    /// <summary>
    /// There are no comments for FirstName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                string value = _FirstName;
                OnGetFirstName(ref value);
                return value;
            }
            set
            {
                if (_FirstName != value)
                {
                  OnFirstNameChanging(ref value);
                  ReportPropertyChanging("FirstName");
                  _FirstName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("FirstName");
                  OnFirstNameChanged();
              }
            }
        }
        private string _FirstName;
        partial void OnGetFirstName(ref string value);
        partial void OnFirstNameChanging(ref string value);
        partial void OnFirstNameChanged();
    
    /// <summary>
    /// There are no comments for Title in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Title
        {
            get
            {
                string value = _Title;
                OnGetTitle(ref value);
                return value;
            }
            set
            {
                if (_Title != value)
                {
                  OnTitleChanging(ref value);
                  ReportPropertyChanging("Title");
                  _Title = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Title");
                  OnTitleChanged();
              }
            }
        }
        private string _Title;
        partial void OnGetTitle(ref string value);
        partial void OnTitleChanging(ref string value);
        partial void OnTitleChanged();
    
    /// <summary>
    /// There are no comments for TitleOfCourtesy in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string TitleOfCourtesy
        {
            get
            {
                string value = _TitleOfCourtesy;
                OnGetTitleOfCourtesy(ref value);
                return value;
            }
            set
            {
                if (_TitleOfCourtesy != value)
                {
                  OnTitleOfCourtesyChanging(ref value);
                  ReportPropertyChanging("TitleOfCourtesy");
                  _TitleOfCourtesy = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("TitleOfCourtesy");
                  OnTitleOfCourtesyChanged();
              }
            }
        }
        private string _TitleOfCourtesy;
        partial void OnGetTitleOfCourtesy(ref string value);
        partial void OnTitleOfCourtesyChanging(ref string value);
        partial void OnTitleOfCourtesyChanged();
    
    /// <summary>
    /// There are no comments for BirthDate in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> BirthDate
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _BirthDate;
                OnGetBirthDate(ref value);
                return value;
            }
            set
            {
                if (_BirthDate != value)
                {
                  OnBirthDateChanging(ref value);
                  ReportPropertyChanging("BirthDate");
                  _BirthDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("BirthDate");
                  OnBirthDateChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _BirthDate;
        partial void OnGetBirthDate(ref global::System.Nullable<System.DateTime> value);
        partial void OnBirthDateChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnBirthDateChanged();
    
    /// <summary>
    /// There are no comments for HireDate in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> HireDate
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _HireDate;
                OnGetHireDate(ref value);
                return value;
            }
            set
            {
                if (_HireDate != value)
                {
                  OnHireDateChanging(ref value);
                  ReportPropertyChanging("HireDate");
                  _HireDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("HireDate");
                  OnHireDateChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _HireDate;
        partial void OnGetHireDate(ref global::System.Nullable<System.DateTime> value);
        partial void OnHireDateChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnHireDateChanged();
    
    /// <summary>
    /// There are no comments for Address in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
    /// <summary>
    /// There are no comments for City in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string City
        {
            get
            {
                string value = _City;
                OnGetCity(ref value);
                return value;
            }
            set
            {
                if (_City != value)
                {
                  OnCityChanging(ref value);
                  ReportPropertyChanging("City");
                  _City = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("City");
                  OnCityChanged();
              }
            }
        }
        private string _City;
        partial void OnGetCity(ref string value);
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged();
    
    /// <summary>
    /// There are no comments for Region in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Region
        {
            get
            {
                string value = _Region;
                OnGetRegion(ref value);
                return value;
            }
            set
            {
                if (_Region != value)
                {
                  OnRegionChanging(ref value);
                  ReportPropertyChanging("Region");
                  _Region = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Region");
                  OnRegionChanged();
              }
            }
        }
        private string _Region;
        partial void OnGetRegion(ref string value);
        partial void OnRegionChanging(ref string value);
        partial void OnRegionChanged();
    
    /// <summary>
    /// There are no comments for PostalCode in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string PostalCode
        {
            get
            {
                string value = _PostalCode;
                OnGetPostalCode(ref value);
                return value;
            }
            set
            {
                if (_PostalCode != value)
                {
                  OnPostalCodeChanging(ref value);
                  ReportPropertyChanging("PostalCode");
                  _PostalCode = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PostalCode");
                  OnPostalCodeChanged();
              }
            }
        }
        private string _PostalCode;
        partial void OnGetPostalCode(ref string value);
        partial void OnPostalCodeChanging(ref string value);
        partial void OnPostalCodeChanged();
    
    /// <summary>
    /// There are no comments for Country in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Country
        {
            get
            {
                string value = _Country;
                OnGetCountry(ref value);
                return value;
            }
            set
            {
                if (_Country != value)
                {
                  OnCountryChanging(ref value);
                  ReportPropertyChanging("Country");
                  _Country = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Country");
                  OnCountryChanged();
              }
            }
        }
        private string _Country;
        partial void OnGetCountry(ref string value);
        partial void OnCountryChanging(ref string value);
        partial void OnCountryChanged();
    
    /// <summary>
    /// There are no comments for HomePhone in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string HomePhone
        {
            get
            {
                string value = _HomePhone;
                OnGetHomePhone(ref value);
                return value;
            }
            set
            {
                if (_HomePhone != value)
                {
                  OnHomePhoneChanging(ref value);
                  ReportPropertyChanging("HomePhone");
                  _HomePhone = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("HomePhone");
                  OnHomePhoneChanged();
              }
            }
        }
        private string _HomePhone;
        partial void OnGetHomePhone(ref string value);
        partial void OnHomePhoneChanging(ref string value);
        partial void OnHomePhoneChanged();
    
    /// <summary>
    /// There are no comments for Extension in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Extension
        {
            get
            {
                string value = _Extension;
                OnGetExtension(ref value);
                return value;
            }
            set
            {
                if (_Extension != value)
                {
                  OnExtensionChanging(ref value);
                  ReportPropertyChanging("Extension");
                  _Extension = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Extension");
                  OnExtensionChanged();
              }
            }
        }
        private string _Extension;
        partial void OnGetExtension(ref string value);
        partial void OnExtensionChanging(ref string value);
        partial void OnExtensionChanged();
    
    /// <summary>
    /// There are no comments for Photo in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public byte[] Photo
        {
            get
            {
                byte[] value = _Photo;
                OnGetPhoto(ref value);
                return value;
            }
            set
            {
                if (_Photo != value)
                {
                  OnPhotoChanging(ref value);
                  ReportPropertyChanging("Photo");
                  _Photo = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Photo");
                  OnPhotoChanged();
              }
            }
        }
        private byte[] _Photo;
        partial void OnGetPhoto(ref byte[] value);
        partial void OnPhotoChanging(ref byte[] value);
        partial void OnPhotoChanged();
    
    /// <summary>
    /// There are no comments for Notes in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Notes
        {
            get
            {
                string value = _Notes;
                OnGetNotes(ref value);
                return value;
            }
            set
            {
                if (_Notes != value)
                {
                  OnNotesChanging(ref value);
                  ReportPropertyChanging("Notes");
                  _Notes = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Notes");
                  OnNotesChanged();
              }
            }
        }
        private string _Notes;
        partial void OnGetNotes(ref string value);
        partial void OnNotesChanging(ref string value);
        partial void OnNotesChanged();
    
    /// <summary>
    /// There are no comments for ReportsTo in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ReportsTo
        {
            get
            {
                global::System.Nullable<int> value = _ReportsTo;
                OnGetReportsTo(ref value);
                return value;
            }
            set
            {
                if (_ReportsTo != value)
                {
                  OnReportsToChanging(ref value);
                  ReportPropertyChanging("ReportsTo");
                  _ReportsTo = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ReportsTo");
                  OnReportsToChanged();
              }
            }
        }
        private global::System.Nullable<int> _ReportsTo;
        partial void OnGetReportsTo(ref global::System.Nullable<int> value);
        partial void OnReportsToChanging(ref global::System.Nullable<int> value);
        partial void OnReportsToChanged();
    
    /// <summary>
    /// There are no comments for PhotoPath in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string PhotoPath
        {
            get
            {
                string value = _PhotoPath;
                OnGetPhotoPath(ref value);
                return value;
            }
            set
            {
                if (_PhotoPath != value)
                {
                  OnPhotoPathChanging(ref value);
                  ReportPropertyChanging("PhotoPath");
                  _PhotoPath = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PhotoPath");
                  OnPhotoPathChanged();
              }
            }
        }
        private string _PhotoPath;
        partial void OnGetPhotoPath(ref string value);
        partial void OnPhotoPathChanging(ref string value);
        partial void OnPhotoPathChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Territories in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Territory", "Territories")]


        public EntityCollection<Territories> Territories
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Territories>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Territory", "Territories");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Territories>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Territory", "Territories", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Order", "Orders")]


        public EntityCollection<Orders> Orders
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Orders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Orders", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Employee", "Subordinates")]


        public EntityCollection<Employees> Subordinates
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Subordinates");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Subordinates", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Employee", "Superior")]


        public Employees Superior
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Superior").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Superior").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Employees> SuperiorReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Superior");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Superior", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Employee", "Superior").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #region Suppliers

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Suppliers in the schema.
    /// </summary>
    /// <KeyProperties>
    /// SupplierID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Suppliers")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Suppliers : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Suppliers object.
        /// </summary>
        /// <param name="supplierID">Initial value of SupplierID.</param>
        /// <param name="companyName">Initial value of CompanyName.</param>
        public static Suppliers CreateSuppliers(int supplierID, string companyName)
        {
            Suppliers suppliers = new Suppliers();
            suppliers.SupplierID = supplierID;
            suppliers.CompanyName = companyName;
            return suppliers;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for SupplierID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int SupplierID
        {
            get
            {
                int value = _SupplierID;
                OnGetSupplierID(ref value);
                return value;
            }
            set
            {
                if (_SupplierID != value)
                {
                  OnSupplierIDChanging(ref value);
                  ReportPropertyChanging("SupplierID");
                  _SupplierID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SupplierID");
                  OnSupplierIDChanged();
              }
            }
        }
        private int _SupplierID;
        partial void OnGetSupplierID(ref int value);
        partial void OnSupplierIDChanging(ref int value);
        partial void OnSupplierIDChanged();
    
    /// <summary>
    /// There are no comments for CompanyName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string CompanyName
        {
            get
            {
                string value = _CompanyName;
                OnGetCompanyName(ref value);
                return value;
            }
            set
            {
                if (_CompanyName != value)
                {
                  OnCompanyNameChanging(ref value);
                  ReportPropertyChanging("CompanyName");
                  _CompanyName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CompanyName");
                  OnCompanyNameChanged();
              }
            }
        }
        private string _CompanyName;
        partial void OnGetCompanyName(ref string value);
        partial void OnCompanyNameChanging(ref string value);
        partial void OnCompanyNameChanged();
    
    /// <summary>
    /// There are no comments for ContactName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ContactName
        {
            get
            {
                string value = _ContactName;
                OnGetContactName(ref value);
                return value;
            }
            set
            {
                if (_ContactName != value)
                {
                  OnContactNameChanging(ref value);
                  ReportPropertyChanging("ContactName");
                  _ContactName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ContactName");
                  OnContactNameChanged();
              }
            }
        }
        private string _ContactName;
        partial void OnGetContactName(ref string value);
        partial void OnContactNameChanging(ref string value);
        partial void OnContactNameChanged();
    
    /// <summary>
    /// There are no comments for ContactTitle in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ContactTitle
        {
            get
            {
                string value = _ContactTitle;
                OnGetContactTitle(ref value);
                return value;
            }
            set
            {
                if (_ContactTitle != value)
                {
                  OnContactTitleChanging(ref value);
                  ReportPropertyChanging("ContactTitle");
                  _ContactTitle = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ContactTitle");
                  OnContactTitleChanged();
              }
            }
        }
        private string _ContactTitle;
        partial void OnGetContactTitle(ref string value);
        partial void OnContactTitleChanging(ref string value);
        partial void OnContactTitleChanged();
    
    /// <summary>
    /// There are no comments for Address in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Address
        {
            get
            {
                string value = _Address;
                OnGetAddress(ref value);
                return value;
            }
            set
            {
                if (_Address != value)
                {
                  OnAddressChanging(ref value);
                  ReportPropertyChanging("Address");
                  _Address = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Address");
                  OnAddressChanged();
              }
            }
        }
        private string _Address;
        partial void OnGetAddress(ref string value);
        partial void OnAddressChanging(ref string value);
        partial void OnAddressChanged();
    
    /// <summary>
    /// There are no comments for City in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string City
        {
            get
            {
                string value = _City;
                OnGetCity(ref value);
                return value;
            }
            set
            {
                if (_City != value)
                {
                  OnCityChanging(ref value);
                  ReportPropertyChanging("City");
                  _City = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("City");
                  OnCityChanged();
              }
            }
        }
        private string _City;
        partial void OnGetCity(ref string value);
        partial void OnCityChanging(ref string value);
        partial void OnCityChanged();
    
    /// <summary>
    /// There are no comments for Region in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Region
        {
            get
            {
                string value = _Region;
                OnGetRegion(ref value);
                return value;
            }
            set
            {
                if (_Region != value)
                {
                  OnRegionChanging(ref value);
                  ReportPropertyChanging("Region");
                  _Region = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Region");
                  OnRegionChanged();
              }
            }
        }
        private string _Region;
        partial void OnGetRegion(ref string value);
        partial void OnRegionChanging(ref string value);
        partial void OnRegionChanged();
    
    /// <summary>
    /// There are no comments for PostalCode in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string PostalCode
        {
            get
            {
                string value = _PostalCode;
                OnGetPostalCode(ref value);
                return value;
            }
            set
            {
                if (_PostalCode != value)
                {
                  OnPostalCodeChanging(ref value);
                  ReportPropertyChanging("PostalCode");
                  _PostalCode = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("PostalCode");
                  OnPostalCodeChanged();
              }
            }
        }
        private string _PostalCode;
        partial void OnGetPostalCode(ref string value);
        partial void OnPostalCodeChanging(ref string value);
        partial void OnPostalCodeChanged();
    
    /// <summary>
    /// There are no comments for Country in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Country
        {
            get
            {
                string value = _Country;
                OnGetCountry(ref value);
                return value;
            }
            set
            {
                if (_Country != value)
                {
                  OnCountryChanging(ref value);
                  ReportPropertyChanging("Country");
                  _Country = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Country");
                  OnCountryChanged();
              }
            }
        }
        private string _Country;
        partial void OnGetCountry(ref string value);
        partial void OnCountryChanging(ref string value);
        partial void OnCountryChanged();
    
    /// <summary>
    /// There are no comments for Phone in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Phone
        {
            get
            {
                string value = _Phone;
                OnGetPhone(ref value);
                return value;
            }
            set
            {
                if (_Phone != value)
                {
                  OnPhoneChanging(ref value);
                  ReportPropertyChanging("Phone");
                  _Phone = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Phone");
                  OnPhoneChanged();
              }
            }
        }
        private string _Phone;
        partial void OnGetPhone(ref string value);
        partial void OnPhoneChanging(ref string value);
        partial void OnPhoneChanged();
    
    /// <summary>
    /// There are no comments for Fax in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Fax
        {
            get
            {
                string value = _Fax;
                OnGetFax(ref value);
                return value;
            }
            set
            {
                if (_Fax != value)
                {
                  OnFaxChanging(ref value);
                  ReportPropertyChanging("Fax");
                  _Fax = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Fax");
                  OnFaxChanged();
              }
            }
        }
        private string _Fax;
        partial void OnGetFax(ref string value);
        partial void OnFaxChanging(ref string value);
        partial void OnFaxChanged();
    
    /// <summary>
    /// There are no comments for HomePage in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string HomePage
        {
            get
            {
                string value = _HomePage;
                OnGetHomePage(ref value);
                return value;
            }
            set
            {
                if (_HomePage != value)
                {
                  OnHomePageChanging(ref value);
                  ReportPropertyChanging("HomePage");
                  _HomePage = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("HomePage");
                  OnHomePageChanged();
              }
            }
        }
        private string _HomePage;
        partial void OnGetHomePage(ref string value);
        partial void OnHomePageChanging(ref string value);
        partial void OnHomePageChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Supplier_Product", "Products")]


        public EntityCollection<Products> Products
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Products");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Products", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Shippers

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Shippers in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ShipperID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Shippers")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Shippers : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Shippers object.
        /// </summary>
        /// <param name="shipperID">Initial value of ShipperID.</param>
        public static Shippers CreateShippers(int shipperID)
        {
            Shippers shippers = new Shippers();
            shippers.ShipperID = shipperID;
            return shippers;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for ShipperID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int ShipperID
        {
            get
            {
                int value = _ShipperID;
                OnGetShipperID(ref value);
                return value;
            }
            set
            {
                if (_ShipperID != value)
                {
                  OnShipperIDChanging(ref value);
                  ReportPropertyChanging("ShipperID");
                  _ShipperID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ShipperID");
                  OnShipperIDChanged();
              }
            }
        }
        private int _ShipperID;
        partial void OnGetShipperID(ref int value);
        partial void OnShipperIDChanging(ref int value);
        partial void OnShipperIDChanged();
    
    /// <summary>
    /// There are no comments for CompanyName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string CompanyName
        {
            get
            {
                string value = _CompanyName;
                OnGetCompanyName(ref value);
                return value;
            }
            set
            {
                if (_CompanyName != value)
                {
                  OnCompanyNameChanging(ref value);
                  ReportPropertyChanging("CompanyName");
                  _CompanyName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("CompanyName");
                  OnCompanyNameChanged();
              }
            }
        }
        private string _CompanyName;
        partial void OnGetCompanyName(ref string value);
        partial void OnCompanyNameChanging(ref string value);
        partial void OnCompanyNameChanged();
    
    /// <summary>
    /// There are no comments for Phone in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string Phone
        {
            get
            {
                string value = _Phone;
                OnGetPhone(ref value);
                return value;
            }
            set
            {
                if (_Phone != value)
                {
                  OnPhoneChanging(ref value);
                  ReportPropertyChanging("Phone");
                  _Phone = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("Phone");
                  OnPhoneChanged();
              }
            }
        }
        private string _Phone;
        partial void OnGetPhone(ref string value);
        partial void OnPhoneChanging(ref string value);
        partial void OnPhoneChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Shipper_Order", "Orders")]


        public EntityCollection<Orders> Orders
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Orders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Orders", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Regions

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Regions in the schema.
    /// </summary>
    /// <KeyProperties>
    /// RegionID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Regions")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Regions : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Regions object.
        /// </summary>
        /// <param name="regionID">Initial value of RegionID.</param>
        /// <param name="regionDescription">Initial value of RegionDescription.</param>
        public static Regions CreateRegions(int regionID, string regionDescription)
        {
            Regions regions = new Regions();
            regions.RegionID = regionID;
            regions.RegionDescription = regionDescription;
            return regions;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for RegionID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int RegionID
        {
            get
            {
                int value = _RegionID;
                OnGetRegionID(ref value);
                return value;
            }
            set
            {
                if (_RegionID != value)
                {
                  OnRegionIDChanging(ref value);
                  ReportPropertyChanging("RegionID");
                  _RegionID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RegionID");
                  OnRegionIDChanged();
              }
            }
        }
        private int _RegionID;
        partial void OnGetRegionID(ref int value);
        partial void OnRegionIDChanging(ref int value);
        partial void OnRegionIDChanged();
    
    /// <summary>
    /// There are no comments for RegionDescription in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string RegionDescription
        {
            get
            {
                string value = _RegionDescription;
                OnGetRegionDescription(ref value);
                return value;
            }
            set
            {
                if (_RegionDescription != value)
                {
                  OnRegionDescriptionChanging(ref value);
                  ReportPropertyChanging("RegionDescription");
                  _RegionDescription = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("RegionDescription");
                  OnRegionDescriptionChanged();
              }
            }
        }
        private string _RegionDescription;
        partial void OnGetRegionDescription(ref string value);
        partial void OnRegionDescriptionChanging(ref string value);
        partial void OnRegionDescriptionChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Territories in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Region_Territory", "Territories")]


        public EntityCollection<Territories> Territories
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Territories>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Territories");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Territories>("Northwind.EntityFramework.ModelFirst.Oracle.Region_Territory", "Territories", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region Products

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Products in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ProductID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Products")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Products : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Products object.
        /// </summary>
        /// <param name="productID">Initial value of ProductID.</param>
        /// <param name="productName">Initial value of ProductName.</param>
        /// <param name="discontinued">Initial value of Discontinued.</param>
        public static Products CreateProducts(int productID, string productName, bool discontinued)
        {
            Products products = new Products();
            products.ProductID = productID;
            products.ProductName = productName;
            products.Discontinued = discontinued;
            return products;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for ProductID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int ProductID
        {
            get
            {
                int value = _ProductID;
                OnGetProductID(ref value);
                return value;
            }
            set
            {
                if (_ProductID != value)
                {
                  OnProductIDChanging(ref value);
                  ReportPropertyChanging("ProductID");
                  _ProductID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ProductID");
                  OnProductIDChanged();
              }
            }
        }
        private int _ProductID;
        partial void OnGetProductID(ref int value);
        partial void OnProductIDChanging(ref int value);
        partial void OnProductIDChanged();
    
    /// <summary>
    /// There are no comments for ProductName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public string ProductName
        {
            get
            {
                string value = _ProductName;
                OnGetProductName(ref value);
                return value;
            }
            set
            {
                if (_ProductName != value)
                {
                  OnProductNameChanging(ref value);
                  ReportPropertyChanging("ProductName");
                  _ProductName = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("ProductName");
                  OnProductNameChanged();
              }
            }
        }
        private string _ProductName;
        partial void OnGetProductName(ref string value);
        partial void OnProductNameChanging(ref string value);
        partial void OnProductNameChanged();
    
    /// <summary>
    /// There are no comments for SupplierID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> SupplierID
        {
            get
            {
                global::System.Nullable<int> value = _SupplierID;
                OnGetSupplierID(ref value);
                return value;
            }
            set
            {
                if (_SupplierID != value)
                {
                  OnSupplierIDChanging(ref value);
                  ReportPropertyChanging("SupplierID");
                  _SupplierID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("SupplierID");
                  OnSupplierIDChanged();
              }
            }
        }
        private global::System.Nullable<int> _SupplierID;
        partial void OnGetSupplierID(ref global::System.Nullable<int> value);
        partial void OnSupplierIDChanging(ref global::System.Nullable<int> value);
        partial void OnSupplierIDChanged();
    
    /// <summary>
    /// There are no comments for CategoryID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> CategoryID
        {
            get
            {
                global::System.Nullable<int> value = _CategoryID;
                OnGetCategoryID(ref value);
                return value;
            }
            set
            {
                if (_CategoryID != value)
                {
                  OnCategoryIDChanging(ref value);
                  ReportPropertyChanging("CategoryID");
                  _CategoryID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("CategoryID");
                  OnCategoryIDChanged();
              }
            }
        }
        private global::System.Nullable<int> _CategoryID;
        partial void OnGetCategoryID(ref global::System.Nullable<int> value);
        partial void OnCategoryIDChanging(ref global::System.Nullable<int> value);
        partial void OnCategoryIDChanged();
    
    /// <summary>
    /// There are no comments for QuantityPerUnit in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string QuantityPerUnit
        {
            get
            {
                string value = _QuantityPerUnit;
                OnGetQuantityPerUnit(ref value);
                return value;
            }
            set
            {
                if (_QuantityPerUnit != value)
                {
                  OnQuantityPerUnitChanging(ref value);
                  ReportPropertyChanging("QuantityPerUnit");
                  _QuantityPerUnit = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("QuantityPerUnit");
                  OnQuantityPerUnitChanged();
              }
            }
        }
        private string _QuantityPerUnit;
        partial void OnGetQuantityPerUnit(ref string value);
        partial void OnQuantityPerUnitChanging(ref string value);
        partial void OnQuantityPerUnitChanged();
    
    /// <summary>
    /// There are no comments for UnitPrice in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<decimal> UnitPrice
        {
            get
            {
                global::System.Nullable<decimal> value = _UnitPrice;
                OnGetUnitPrice(ref value);
                return value;
            }
            set
            {
                if (_UnitPrice != value)
                {
                  OnUnitPriceChanging(ref value);
                  ReportPropertyChanging("UnitPrice");
                  _UnitPrice = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UnitPrice");
                  OnUnitPriceChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _UnitPrice;
        partial void OnGetUnitPrice(ref global::System.Nullable<decimal> value);
        partial void OnUnitPriceChanging(ref global::System.Nullable<decimal> value);
        partial void OnUnitPriceChanged();
    
    /// <summary>
    /// There are no comments for UnitsInStock in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> UnitsInStock
        {
            get
            {
                global::System.Nullable<int> value = _UnitsInStock;
                OnGetUnitsInStock(ref value);
                return value;
            }
            set
            {
                if (_UnitsInStock != value)
                {
                  OnUnitsInStockChanging(ref value);
                  ReportPropertyChanging("UnitsInStock");
                  _UnitsInStock = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UnitsInStock");
                  OnUnitsInStockChanged();
              }
            }
        }
        private global::System.Nullable<int> _UnitsInStock;
        partial void OnGetUnitsInStock(ref global::System.Nullable<int> value);
        partial void OnUnitsInStockChanging(ref global::System.Nullable<int> value);
        partial void OnUnitsInStockChanged();
    
    /// <summary>
    /// There are no comments for UnitsOnOrder in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> UnitsOnOrder
        {
            get
            {
                global::System.Nullable<int> value = _UnitsOnOrder;
                OnGetUnitsOnOrder(ref value);
                return value;
            }
            set
            {
                if (_UnitsOnOrder != value)
                {
                  OnUnitsOnOrderChanging(ref value);
                  ReportPropertyChanging("UnitsOnOrder");
                  _UnitsOnOrder = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UnitsOnOrder");
                  OnUnitsOnOrderChanged();
              }
            }
        }
        private global::System.Nullable<int> _UnitsOnOrder;
        partial void OnGetUnitsOnOrder(ref global::System.Nullable<int> value);
        partial void OnUnitsOnOrderChanging(ref global::System.Nullable<int> value);
        partial void OnUnitsOnOrderChanged();
    
    /// <summary>
    /// There are no comments for ReorderLevel in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ReorderLevel
        {
            get
            {
                global::System.Nullable<int> value = _ReorderLevel;
                OnGetReorderLevel(ref value);
                return value;
            }
            set
            {
                if (_ReorderLevel != value)
                {
                  OnReorderLevelChanging(ref value);
                  ReportPropertyChanging("ReorderLevel");
                  _ReorderLevel = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ReorderLevel");
                  OnReorderLevelChanged();
              }
            }
        }
        private global::System.Nullable<int> _ReorderLevel;
        partial void OnGetReorderLevel(ref global::System.Nullable<int> value);
        partial void OnReorderLevelChanging(ref global::System.Nullable<int> value);
        partial void OnReorderLevelChanged();
    
    /// <summary>
    /// There are no comments for Discontinued in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public bool Discontinued
        {
            get
            {
                bool value = _Discontinued;
                OnGetDiscontinued(ref value);
                return value;
            }
            set
            {
                if (_Discontinued != value)
                {
                  OnDiscontinuedChanging(ref value);
                  ReportPropertyChanging("Discontinued");
                  _Discontinued = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Discontinued");
                  OnDiscontinuedChanged();
              }
            }
        }
        private bool _Discontinued;
        partial void OnGetDiscontinued(ref bool value);
        partial void OnDiscontinuedChanging(ref bool value);
        partial void OnDiscontinuedChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Categories in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Category_Product", "Category")]


        public Categories Category
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Categories>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Category").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Categories>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Category").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Categories in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Categories> CategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Categories>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Category");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Categories>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Category", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Categories>("Northwind.EntityFramework.ModelFirst.Oracle.Category_Product", "Category").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Suppliers in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Supplier_Product", "Supplier")]


        public Suppliers Supplier
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Suppliers>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Supplier").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Suppliers>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Supplier").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Suppliers in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Suppliers> SupplierReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Suppliers>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Supplier");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Suppliers>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Supplier", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Suppliers>("Northwind.EntityFramework.ModelFirst.Oracle.Supplier_Product", "Supplier").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for OrderDetails in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Product_OrderDetail", "OrderDetails")]


        public EntityCollection<OrderDetails> OrderDetails
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OrderDetails>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "OrderDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OrderDetails>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "OrderDetails", value);
                }
            }
        }

        #endregion
    }
    #endregion

    #region OrderDetails

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.OrderDetails in the schema.
    /// </summary>
    /// <KeyProperties>
    /// OrderID
    /// ProductID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="OrderDetails")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OrderDetails : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new OrderDetails object.
        /// </summary>
        /// <param name="orderID">Initial value of OrderID.</param>
        /// <param name="productID">Initial value of ProductID.</param>
        /// <param name="unitPrice">Initial value of UnitPrice.</param>
        /// <param name="quantity">Initial value of Quantity.</param>
        /// <param name="discount">Initial value of Discount.</param>
        public static OrderDetails CreateOrderDetails(int orderID, int productID, decimal unitPrice, int quantity, decimal discount)
        {
            OrderDetails orderDetails = new OrderDetails();
            orderDetails.OrderID = orderID;
            orderDetails.ProductID = productID;
            orderDetails.UnitPrice = unitPrice;
            orderDetails.Quantity = quantity;
            orderDetails.Discount = discount;
            return orderDetails;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for OrderID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int OrderID
        {
            get
            {
                int value = _OrderID;
                OnGetOrderID(ref value);
                return value;
            }
            set
            {
                if (_OrderID != value)
                {
                  OnOrderIDChanging(ref value);
                  ReportPropertyChanging("OrderID");
                  _OrderID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderID");
                  OnOrderIDChanged();
              }
            }
        }
        private int _OrderID;
        partial void OnGetOrderID(ref int value);
        partial void OnOrderIDChanging(ref int value);
        partial void OnOrderIDChanged();
    
    /// <summary>
    /// There are no comments for ProductID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int ProductID
        {
            get
            {
                int value = _ProductID;
                OnGetProductID(ref value);
                return value;
            }
            set
            {
                if (_ProductID != value)
                {
                  OnProductIDChanging(ref value);
                  ReportPropertyChanging("ProductID");
                  _ProductID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ProductID");
                  OnProductIDChanged();
              }
            }
        }
        private int _ProductID;
        partial void OnGetProductID(ref int value);
        partial void OnProductIDChanging(ref int value);
        partial void OnProductIDChanged();
    
    /// <summary>
    /// There are no comments for UnitPrice in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public decimal UnitPrice
        {
            get
            {
                decimal value = _UnitPrice;
                OnGetUnitPrice(ref value);
                return value;
            }
            set
            {
                if (_UnitPrice != value)
                {
                  OnUnitPriceChanging(ref value);
                  ReportPropertyChanging("UnitPrice");
                  _UnitPrice = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("UnitPrice");
                  OnUnitPriceChanged();
              }
            }
        }
        private decimal _UnitPrice;
        partial void OnGetUnitPrice(ref decimal value);
        partial void OnUnitPriceChanging(ref decimal value);
        partial void OnUnitPriceChanged();
    
    /// <summary>
    /// There are no comments for Quantity in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public int Quantity
        {
            get
            {
                int value = _Quantity;
                OnGetQuantity(ref value);
                return value;
            }
            set
            {
                if (_Quantity != value)
                {
                  OnQuantityChanging(ref value);
                  ReportPropertyChanging("Quantity");
                  _Quantity = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Quantity");
                  OnQuantityChanged();
              }
            }
        }
        private int _Quantity;
        partial void OnGetQuantity(ref int value);
        partial void OnQuantityChanging(ref int value);
        partial void OnQuantityChanged();
    
    /// <summary>
    /// There are no comments for Discount in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public decimal Discount
        {
            get
            {
                decimal value = _Discount;
                OnGetDiscount(ref value);
                return value;
            }
            set
            {
                if (_Discount != value)
                {
                  OnDiscountChanging(ref value);
                  ReportPropertyChanging("Discount");
                  _Discount = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Discount");
                  OnDiscountChanged();
              }
            }
        }
        private decimal _Discount;
        partial void OnGetDiscount(ref decimal value);
        partial void OnDiscountChanging(ref decimal value);
        partial void OnDiscountChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Order_OrderDetail", "Order")]


        public Orders Order
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "Order").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "Order").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Orders> OrderReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "Order");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "Order", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Orders>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "Order").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Product_OrderDetail", "Product")]


        public Products Product
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "Product").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "Product").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Products in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Products> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "Product");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "Product", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Products>("Northwind.EntityFramework.ModelFirst.Oracle.Product_OrderDetail", "Product").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #region Orders

    /// <summary>
    /// There are no comments for Northwind.EntityFramework.ModelFirst.Oracle.Orders in the schema.
    /// </summary>
    /// <KeyProperties>
    /// OrderID
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="Northwind.EntityFramework.ModelFirst.Oracle", Name="Orders")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Orders : EntityObject
    {
        #region Factory Method

        /// <summary>
        /// Create a new Orders object.
        /// </summary>
        /// <param name="orderID">Initial value of OrderID.</param>
        public static Orders CreateOrders(int orderID)
        {
            Orders orders = new Orders();
            orders.OrderID = orderID;
            return orders;
        }

        #endregion

        #region Properties
    
    /// <summary>
    /// There are no comments for OrderID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public int OrderID
        {
            get
            {
                int value = _OrderID;
                OnGetOrderID(ref value);
                return value;
            }
            set
            {
                if (_OrderID != value)
                {
                  OnOrderIDChanging(ref value);
                  ReportPropertyChanging("OrderID");
                  _OrderID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderID");
                  OnOrderIDChanged();
              }
            }
        }
        private int _OrderID;
        partial void OnGetOrderID(ref int value);
        partial void OnOrderIDChanging(ref int value);
        partial void OnOrderIDChanged();
    
    /// <summary>
    /// There are no comments for CustomerID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string CustomerID
        {
            get
            {
                string value = _CustomerID;
                OnGetCustomerID(ref value);
                return value;
            }
            set
            {
                if (_CustomerID != value)
                {
                  OnCustomerIDChanging(ref value);
                  ReportPropertyChanging("CustomerID");
                  _CustomerID = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("CustomerID");
                  OnCustomerIDChanged();
              }
            }
        }
        private string _CustomerID;
        partial void OnGetCustomerID(ref string value);
        partial void OnCustomerIDChanging(ref string value);
        partial void OnCustomerIDChanged();
    
    /// <summary>
    /// There are no comments for EmployeeID in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> EmployeeID
        {
            get
            {
                global::System.Nullable<int> value = _EmployeeID;
                OnGetEmployeeID(ref value);
                return value;
            }
            set
            {
                if (_EmployeeID != value)
                {
                  OnEmployeeIDChanging(ref value);
                  ReportPropertyChanging("EmployeeID");
                  _EmployeeID = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("EmployeeID");
                  OnEmployeeIDChanged();
              }
            }
        }
        private global::System.Nullable<int> _EmployeeID;
        partial void OnGetEmployeeID(ref global::System.Nullable<int> value);
        partial void OnEmployeeIDChanging(ref global::System.Nullable<int> value);
        partial void OnEmployeeIDChanged();
    
    /// <summary>
    /// There are no comments for OrderDate in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> OrderDate
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _OrderDate;
                OnGetOrderDate(ref value);
                return value;
            }
            set
            {
                if (_OrderDate != value)
                {
                  OnOrderDateChanging(ref value);
                  ReportPropertyChanging("OrderDate");
                  _OrderDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("OrderDate");
                  OnOrderDateChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _OrderDate;
        partial void OnGetOrderDate(ref global::System.Nullable<System.DateTime> value);
        partial void OnOrderDateChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnOrderDateChanged();
    
    /// <summary>
    /// There are no comments for RequiredDate in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> RequiredDate
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _RequiredDate;
                OnGetRequiredDate(ref value);
                return value;
            }
            set
            {
                if (_RequiredDate != value)
                {
                  OnRequiredDateChanging(ref value);
                  ReportPropertyChanging("RequiredDate");
                  _RequiredDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("RequiredDate");
                  OnRequiredDateChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _RequiredDate;
        partial void OnGetRequiredDate(ref global::System.Nullable<System.DateTime> value);
        partial void OnRequiredDateChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnRequiredDateChanged();
    
    /// <summary>
    /// There are no comments for ShippedDate in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<System.DateTime> ShippedDate
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _ShippedDate;
                OnGetShippedDate(ref value);
                return value;
            }
            set
            {
                if (_ShippedDate != value)
                {
                  OnShippedDateChanging(ref value);
                  ReportPropertyChanging("ShippedDate");
                  _ShippedDate = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ShippedDate");
                  OnShippedDateChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _ShippedDate;
        partial void OnGetShippedDate(ref global::System.Nullable<System.DateTime> value);
        partial void OnShippedDateChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnShippedDateChanged();
    
    /// <summary>
    /// There are no comments for ShipVia in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<int> ShipVia
        {
            get
            {
                global::System.Nullable<int> value = _ShipVia;
                OnGetShipVia(ref value);
                return value;
            }
            set
            {
                if (_ShipVia != value)
                {
                  OnShipViaChanging(ref value);
                  ReportPropertyChanging("ShipVia");
                  _ShipVia = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("ShipVia");
                  OnShipViaChanged();
              }
            }
        }
        private global::System.Nullable<int> _ShipVia;
        partial void OnGetShipVia(ref global::System.Nullable<int> value);
        partial void OnShipViaChanging(ref global::System.Nullable<int> value);
        partial void OnShipViaChanged();
    
    /// <summary>
    /// There are no comments for Freight in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public global::System.Nullable<decimal> Freight
        {
            get
            {
                global::System.Nullable<decimal> value = _Freight;
                OnGetFreight(ref value);
                return value;
            }
            set
            {
                if (_Freight != value)
                {
                  OnFreightChanging(ref value);
                  ReportPropertyChanging("Freight");
                  _Freight = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("Freight");
                  OnFreightChanged();
              }
            }
        }
        private global::System.Nullable<decimal> _Freight;
        partial void OnGetFreight(ref global::System.Nullable<decimal> value);
        partial void OnFreightChanging(ref global::System.Nullable<decimal> value);
        partial void OnFreightChanged();
    
    /// <summary>
    /// There are no comments for ShipName in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ShipName
        {
            get
            {
                string value = _ShipName;
                OnGetShipName(ref value);
                return value;
            }
            set
            {
                if (_ShipName != value)
                {
                  OnShipNameChanging(ref value);
                  ReportPropertyChanging("ShipName");
                  _ShipName = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ShipName");
                  OnShipNameChanged();
              }
            }
        }
        private string _ShipName;
        partial void OnGetShipName(ref string value);
        partial void OnShipNameChanging(ref string value);
        partial void OnShipNameChanged();
    
    /// <summary>
    /// There are no comments for ShipAddress in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ShipAddress
        {
            get
            {
                string value = _ShipAddress;
                OnGetShipAddress(ref value);
                return value;
            }
            set
            {
                if (_ShipAddress != value)
                {
                  OnShipAddressChanging(ref value);
                  ReportPropertyChanging("ShipAddress");
                  _ShipAddress = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ShipAddress");
                  OnShipAddressChanged();
              }
            }
        }
        private string _ShipAddress;
        partial void OnGetShipAddress(ref string value);
        partial void OnShipAddressChanging(ref string value);
        partial void OnShipAddressChanged();
    
    /// <summary>
    /// There are no comments for ShipCity in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ShipCity
        {
            get
            {
                string value = _ShipCity;
                OnGetShipCity(ref value);
                return value;
            }
            set
            {
                if (_ShipCity != value)
                {
                  OnShipCityChanging(ref value);
                  ReportPropertyChanging("ShipCity");
                  _ShipCity = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ShipCity");
                  OnShipCityChanged();
              }
            }
        }
        private string _ShipCity;
        partial void OnGetShipCity(ref string value);
        partial void OnShipCityChanging(ref string value);
        partial void OnShipCityChanged();
    
    /// <summary>
    /// There are no comments for ShipRegion in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ShipRegion
        {
            get
            {
                string value = _ShipRegion;
                OnGetShipRegion(ref value);
                return value;
            }
            set
            {
                if (_ShipRegion != value)
                {
                  OnShipRegionChanging(ref value);
                  ReportPropertyChanging("ShipRegion");
                  _ShipRegion = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ShipRegion");
                  OnShipRegionChanged();
              }
            }
        }
        private string _ShipRegion;
        partial void OnGetShipRegion(ref string value);
        partial void OnShipRegionChanging(ref string value);
        partial void OnShipRegionChanged();
    
    /// <summary>
    /// There are no comments for ShipPostalCode in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ShipPostalCode
        {
            get
            {
                string value = _ShipPostalCode;
                OnGetShipPostalCode(ref value);
                return value;
            }
            set
            {
                if (_ShipPostalCode != value)
                {
                  OnShipPostalCodeChanging(ref value);
                  ReportPropertyChanging("ShipPostalCode");
                  _ShipPostalCode = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ShipPostalCode");
                  OnShipPostalCodeChanged();
              }
            }
        }
        private string _ShipPostalCode;
        partial void OnGetShipPostalCode(ref string value);
        partial void OnShipPostalCodeChanging(ref string value);
        partial void OnShipPostalCodeChanged();
    
    /// <summary>
    /// There are no comments for ShipCountry in the schema.
    /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public string ShipCountry
        {
            get
            {
                string value = _ShipCountry;
                OnGetShipCountry(ref value);
                return value;
            }
            set
            {
                if (_ShipCountry != value)
                {
                  OnShipCountryChanging(ref value);
                  ReportPropertyChanging("ShipCountry");
                  _ShipCountry = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("ShipCountry");
                  OnShipCountryChanged();
              }
            }
        }
        private string _ShipCountry;
        partial void OnGetShipCountry(ref string value);
        partial void OnShipCountryChanging(ref string value);
        partial void OnShipCountryChanged();

        #endregion

        #region Navigation Properties
        /// <summary>
        /// There are no comments for OrderDetails in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Order_OrderDetail", "OrderDetails")]


        public EntityCollection<OrderDetails> OrderDetails
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OrderDetails>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "OrderDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OrderDetails>("Northwind.EntityFramework.ModelFirst.Oracle.Order_OrderDetail", "OrderDetails", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Customer_Order", "Customer")]


        public Customers Customer
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Customer").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Customer").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Customers in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Customers> CustomerReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Customer");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Customer", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Customers>("Northwind.EntityFramework.ModelFirst.Oracle.Customer_Order", "Customer").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Employee_Order", "Employee")]


        public Employees Employee
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Employee").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Employee").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Employees in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Employees> EmployeeReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Employee");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Employee", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Employees>("Northwind.EntityFramework.ModelFirst.Oracle.Employee_Order", "Employee").Value = null;
                }
            }
        }
        /// <summary>
        /// There are no comments for Shippers in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Northwind.EntityFramework.ModelFirst.Oracle", "Shipper_Order", "Shipper")]


        public Shippers Shipper
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Shippers>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Shipper").Value;
            }
            set
            {
                ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Shippers>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Shipper").Value = value;
            }
        }

        /// <summary>
        /// There are no comments for Shippers in the schema.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Shippers> ShipperReference
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Shippers>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Shipper");
            }
            set
            {
                if (value != null)
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Shippers>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Shipper", value);
                }
                else 
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Shippers>("Northwind.EntityFramework.ModelFirst.Oracle.Shipper_Order", "Shipper").Value = null;
                }
            }
        }

        #endregion
    }
    #endregion

    #endregion
}
